{
	"info": {
		"_postman_id": "9b85bcfa-bb2c-470e-a4b0-b4666ee7b177",
		"name": "TicTacToe REST API",
		"description": "# ðŸš€ Get started here\n\nThere are 4 request examples:\n\n1. **POST** \"Create a game\" - creates a game. The game ID can be used for the following calls.\n    \n2. **PATCH** \"Make Move Player 1\"\n    \n3. **PATCH** \"Make Move Player 2\"\n    \n4. **GET** \"Get All games\"\n.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3785289",
		"_collection_link": "https://blue-astronaut-739653.postman.co/workspace/aws~2666173d-066f-44c9-a93c-69f977f075c8/collection/3785289-9b85bcfa-bb2c-470e-a4b0-b4666ee7b177?action=share&source=collection_link&creator=3785289"
	},
	"item": [
		{
			"name": "Get All games",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/games",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"games"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create a game",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/games?player1=player1&player2=player2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"games"
					],
					"query": [
						{
							"key": "player1",
							"value": "player1"
						},
						{
							"key": "player2",
							"value": "player2"
						}
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Make Move Player 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/games/68ad7922f2c2a9efa392ac34?player=player1&row=1&column=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"games",
						"68ad7922f2c2a9efa392ac34"
					],
					"query": [
						{
							"key": "player",
							"value": "player1"
						},
						{
							"key": "row",
							"value": "1"
						},
						{
							"key": "column",
							"value": "1"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Make Move Player 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/games/68ad7922f2c2a9efa392ac34?player=player2&row=1&column=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"games",
						"68ad7922f2c2a9efa392ac34"
					],
					"query": [
						{
							"key": "player",
							"value": "player2"
						},
						{
							"key": "row",
							"value": "1"
						},
						{
							"key": "column",
							"value": "1"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "127.0.0.1:8080"
		}
	]
}